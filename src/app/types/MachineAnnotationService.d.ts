/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Automated annotation services that enhance biodiversity data
 */
export interface MachineAnnotationService {
  /**
   * The unique identifier (handle) of the Machine Annotation Service object
   */
  "@id"?: string;
  /**
   * The type of the object, in this case ods:MachineAnnotationService
   */
  "@type": "ods:MachineAnnotationService";
  /**
   * Handle of the Machine Annotation Service
   */
  "schema:identifier": string;
  /**
   * The DOI to the FDO type of the object
   */
  "ods:fdoType": string;
  /**
   * The status of the Digital Object. A digital object can be in Draft, when it is not published yet. Active when it is published and the object is active and Tombstone which means the object has been archived.
   */
  "ods:status"?: "Draft" | "Active" | "Tombstone";
  /**
   * The version of the object, each change generates a new version. The version starts at 1 and each change will increment the version number with 1
   */
  "schema:version"?: number;
  /**
   * Name of the Machine Annotation Service as provided by the user, https://schema.org/name
   */
  "schema:name": string;
  /**
   * Description of the Machine Annotation Service as provided by the user, https://schema.org/description
   */
  "schema:description"?: string;
  /**
   * Timestamp of creation. Internally generated, following the ISO Date Time Format yyyy-MM-dd'T'HH:mm:ss.SSSXXX
   */
  "schema:dateCreated": string;
  /**
   * Timestamp of last modification. Internally generated, following the ISO Date Time Format yyyy-MM-dd'T'HH:mm:ss.SSSXXX
   */
  "schema:dateModified": string;
  "schema:creator": Agent;
  /**
   * The URI to the location of the image in a public container repository. Should only contain the image name and not the tag
   */
  "ods:containerImage": string;
  /**
   * The image tag of the container image. This should not be `latest` but point to a specific version. On an update of the application a new image tag should be generated and the Digital Object should be updated
   */
  "ods:containerTag": string;
  /**
   * Filters describing the criteria that a Digital Object must meet in order to apply the MAS. No filters implies the MAS may run on *any* digital object. Field names are given in JSON paths, and accepted values for that field are provided as an arrays. An `*` can be used as a wildcard, indicating any value is seen as valid
   */
  "ods:hasTargetDigitalObjectFilter"?: {
    [k: string]: unknown;
  };
  /**
   * The current status of the service in terms of its service lifecycle
   */
  "schema:creativeWorkStatus"?: string;
  /**
   * Link to the repository where the un-compiled, human readable code and related code is located (SVN, GitHub, CodePlex)
   */
  "schema:codeRepository"?: string;
  /**
   * The primary programming language used by the MAS
   */
  "schema:programmingLanguage"?: string;
  /**
   * Availability commitment in uptime percentage of the service provider as described in the SLA
   */
  "ods:serviceAvailability"?: string;
  "schema:maintainer"?: Agent1;
  /**
   * A license document which applies to this Machine Annotation Service
   */
  "schema:license"?: string;
  /**
   * The contact point for support and information for the Machine Annotation Service
   */
  "schema:ContactPoint"?: {
    /**
     * General description of the contact point
     */
    "schema:description"?: string;
    /**
     * Email of the contact point
     */
    "schema:email"?: string;
    /**
     * URL of the contact point, this could be a link to a contact form or a link to a github issues page
     */
    "schema:url"?: string;
    /**
     * Telephone number of the contact point
     */
    "schema:telephone"?: string;
    [k: string]: unknown;
  };
  /**
   * Link to SLA documentation of the Machine Annotation Service
   */
  "ods:slaDocumentation"?: string;
  /**
   * Kafka topic through which the MAS receives messages. Defaults to PID of the Machine Annotation Service
   */
  "ods:topicName"?: string;
  /**
   * The maximum amount of this MAS that can simultaneously run without causing issues
   */
  "ods:maxReplicas"?: number;
  /**
   * Whether or not this Machine Annotation Service can create Batch Annotations. Machine Annotations Service outputs must then comply with batchMetadata, see https://schemas.dissco.tech/schemas/annotations/0.1.0/annotation-event.json
   */
  "ods:batchingPermitted": boolean;
  /**
   * Time in milliseconds the MAS message may remain in the Kafka Queue before being marked as timed out. Min 1 hour.
   */
  "ods:timeToLive": number;
  "ods:hasTombstoneMetadata"?: TombstoneMetadata;
  /**
   * Environmental variables to supply to the Machine Annotation Service, non-sensitive
   */
  "ods:hasEnvironmentalVariables"?: EnvironmentalVariable[];
  /**
   * Secret variables to supply to the Machine Annotation Service, sensitive
   */
  "ods:hasSecretVariables"?: SecretVariable[];
}
/**
 * Contains information about the creator of this MachineAnnotationService Digital Object, the agent creating this record in DiSSCo's system
 */
export interface Agent {
  /**
   * The identifier for the Agent object
   */
  "@id"?: string;
  /**
   * The type of the agent, the prov ontology is only used in the prov-o ods:CreateUpdateTombstoneEvent
   */
  "@type":
    | "schema:Person"
    | "schema:Organization"
    | "schema:SoftwareApplication"
    | "prov:Person"
    | "prov:SoftwareAgent";
  /**
   * The primary unique identifier of the Agent object. All identifiers will also be added to the ods:hasIdentifiers array
   */
  "schema:identifier"?: string;
  /**
   * Full name of the agent
   */
  "schema:name"?: string;
  /**
   * Contains all roles associated with the agent in the context of the Digital Object. Should always contain at least one role
   *
   * @minItems 1
   */
  "ods:hasRoles"?: [
    {
      /**
       * The identifier for the agent role, preferably a URL to a controlled vocabulary
       */
      "@id"?: string;
      /**
       * The type of the object, in this case schema:Role
       */
      "@type": "schema:Role";
      /**
       * The category that best matches the nature of a role of an Agent
       */
      "schema:roleName": string;
      /**
       * Date the agent began the role
       */
      "schema:startDate"?: string;
      /**
       * Date the agent ended the role
       */
      "schema:endDate"?: string;
      /**
       * Can be used to indicate the order of importance when there are multiple agents with the same role. Lower order means higher importance.
       */
      "schema:position"?: number;
    },
    ...{
      /**
       * The identifier for the agent role, preferably a URL to a controlled vocabulary
       */
      "@id"?: string;
      /**
       * The type of the object, in this case schema:Role
       */
      "@type": "schema:Role";
      /**
       * The category that best matches the nature of a role of an Agent
       */
      "schema:roleName": string;
      /**
       * Date the agent began the role
       */
      "schema:startDate"?: string;
      /**
       * Date the agent ended the role
       */
      "schema:endDate"?: string;
      /**
       * Can be used to indicate the order of importance when there are multiple agents with the same role. Lower order means higher importance.
       */
      "schema:position"?: number;
    }[]
  ];
  /**
   * Email of the agent
   */
  "schema:email"?: string;
  /**
   * URL to a website of the agent
   */
  "schema:url"?: string;
  /**
   * Contains all identifiers associated with the agent
   */
  "ods:hasIdentifiers"?: Identifier[];
}
/**
 * Object used to describe identifiers of a Digital Object, based on https://rs.gbif.org/extension/gbif/1.0/identifier.xml but includes ods specific terms
 */
export interface Identifier {
  /**
   * The identifier for the Identifier object.
   */
  "@id"?: string;
  /**
   * The type of the digital object, in this case a ods:Identifier
   */
  "@type": "ods:Identifier";
  /**
   * A name for the identifier
   */
  "dcterms:title": string;
  /**
   * The type of the value in the `dcterms:identifier` field
   */
  "dcterms:type"?:
    | "ARK"
    | "arXiv"
    | "bibcode"
    | "DOI"
    | "EAN13"
    | "EISSN"
    | "Handle"
    | "IGSN"
    | "ISBN"
    | "ISSN"
    | "ISTC"
    | "LISSN"
    | "LSID"
    | "PMID"
    | "PURL"
    | "UPC"
    | "URL"
    | "URN"
    | "w3id"
    | "UUID"
    | "Other"
    | "Locally unique identifier";
  /**
   * The value for the identifier
   */
  "dcterms:identifier": string;
  /**
   * All possible mime types of content that can be returned by identifier in case the identifier is resolvable. Plain UUIDs for example do not have a dc:format return type, as they are not resolvable on their own. For a list of MIME types see the list maintained by IANA: http://www.iana.org/assignments/media-types/index.html, in particular the text http://www.iana.org/assignments/media-types/text/ and application http://www.iana.org/assignments/media-types/application/ types. Frequently used values are text/html, text/xml, application/rdf+xml, application/json
   */
  "dcterms:format"?: string[];
  /**
   * Additional keywords that the publisher may prefer to be attached to the identifier
   */
  "dcterms:subject"?: string[];
  /**
   * Indicates whether the identifier is part of the physical label
   */
  "ods:isPartOfLabel"?: boolean;
  /**
   * Indicates whether the identifier is a persistent identifier
   */
  "ods:gupriLevel"?:
    | "LocallyUniqueStable"
    | "GloballyUniqueStable"
    | "GloballyUniqueStableResolvable"
    | "GloballyUniqueStablePersistentResolvable"
    | "GloballyUniqueStablePersistentResolvableFDOCompliant";
  /**
   * Indicates the status of the identifier
   */
  "ods:identifierStatus"?: "Preferred" | "Alternative" | "Superseded";
}
/**
 * Party maintaining the code, could be an schema:Organisation or a schema:Person
 */
export interface Agent1 {
  /**
   * The identifier for the Agent object
   */
  "@id"?: string;
  /**
   * The type of the agent, the prov ontology is only used in the prov-o ods:CreateUpdateTombstoneEvent
   */
  "@type":
    | "schema:Person"
    | "schema:Organization"
    | "schema:SoftwareApplication"
    | "prov:Person"
    | "prov:SoftwareAgent";
  /**
   * The primary unique identifier of the Agent object. All identifiers will also be added to the ods:hasIdentifiers array
   */
  "schema:identifier"?: string;
  /**
   * Full name of the agent
   */
  "schema:name"?: string;
  /**
   * Contains all roles associated with the agent in the context of the Digital Object. Should always contain at least one role
   *
   * @minItems 1
   */
  "ods:hasRoles"?: [
    {
      /**
       * The identifier for the agent role, preferably a URL to a controlled vocabulary
       */
      "@id"?: string;
      /**
       * The type of the object, in this case schema:Role
       */
      "@type": "schema:Role";
      /**
       * The category that best matches the nature of a role of an Agent
       */
      "schema:roleName": string;
      /**
       * Date the agent began the role
       */
      "schema:startDate"?: string;
      /**
       * Date the agent ended the role
       */
      "schema:endDate"?: string;
      /**
       * Can be used to indicate the order of importance when there are multiple agents with the same role. Lower order means higher importance.
       */
      "schema:position"?: number;
    },
    ...{
      /**
       * The identifier for the agent role, preferably a URL to a controlled vocabulary
       */
      "@id"?: string;
      /**
       * The type of the object, in this case schema:Role
       */
      "@type": "schema:Role";
      /**
       * The category that best matches the nature of a role of an Agent
       */
      "schema:roleName": string;
      /**
       * Date the agent began the role
       */
      "schema:startDate"?: string;
      /**
       * Date the agent ended the role
       */
      "schema:endDate"?: string;
      /**
       * Can be used to indicate the order of importance when there are multiple agents with the same role. Lower order means higher importance.
       */
      "schema:position"?: number;
    }[]
  ];
  /**
   * Email of the agent
   */
  "schema:email"?: string;
  /**
   * URL to a website of the agent
   */
  "schema:url"?: string;
  /**
   * Contains all identifiers associated with the agent
   */
  "ods:hasIdentifiers"?: Identifier[];
}
/**
 * Object containing the tombstone metadata of the object
 */
export interface TombstoneMetadata {
  /**
   * The type of the record, in this case a ods:Tombstone
   */
  "@type": "ods:Tombstone";
  /**
   * Timestamp the Digital Object was tombstoned and no longer active. Following the ISO Date Time Format yyyy-MM-dd'T'HH:mm:ss.SSSXXX
   */
  "ods:tombstoneDate": string;
  /**
   * A reason why the Digital Object was tombstoned
   */
  "ods:tombstoneText": string;
  /**
   * The agent(s) who tombstoned the Digital Object, contains an ods:Agent object
   *
   * @minItems 1
   */
  "ods:hasAgents": [Agent2, ...Agent2[]];
  /**
   * The PIDs of the object the tombstoned object is related to
   */
  "ods:hasRelatedPIDs"?: {
    /**
     * The type of the object, in this case a ods:RelatedPID
     */
    "@type": "ods:RelatedPID";
    /**
     * The PID of the related object, used in cases of `ods:Annotation`, `ods:DigitalMedia` and `ods:DigitalSpecimen`
     */
    "dcterms:identifier"?: string;
    /**
     * The PID of the related object, used in cases of `ods:DataMapping`, `ods:SourceSystem` and `ods:MachineAnnotationService`
     */
    "schema:identifier"?: string;
    /**
     * The type of relationship between the tombstoned object and the related object
     */
    "ods:relationshipType": string;
  }[];
}
export interface Agent2 {
  /**
   * The identifier for the Agent object
   */
  "@id"?: string;
  /**
   * The type of the agent, the prov ontology is only used in the prov-o ods:CreateUpdateTombstoneEvent
   */
  "@type":
    | "schema:Person"
    | "schema:Organization"
    | "schema:SoftwareApplication"
    | "prov:Person"
    | "prov:SoftwareAgent";
  /**
   * The primary unique identifier of the Agent object. All identifiers will also be added to the ods:hasIdentifiers array
   */
  "schema:identifier"?: string;
  /**
   * Full name of the agent
   */
  "schema:name"?: string;
  /**
   * Contains all roles associated with the agent in the context of the Digital Object. Should always contain at least one role
   *
   * @minItems 1
   */
  "ods:hasRoles"?: [
    {
      /**
       * The identifier for the agent role, preferably a URL to a controlled vocabulary
       */
      "@id"?: string;
      /**
       * The type of the object, in this case schema:Role
       */
      "@type": "schema:Role";
      /**
       * The category that best matches the nature of a role of an Agent
       */
      "schema:roleName": string;
      /**
       * Date the agent began the role
       */
      "schema:startDate"?: string;
      /**
       * Date the agent ended the role
       */
      "schema:endDate"?: string;
      /**
       * Can be used to indicate the order of importance when there are multiple agents with the same role. Lower order means higher importance.
       */
      "schema:position"?: number;
    },
    ...{
      /**
       * The identifier for the agent role, preferably a URL to a controlled vocabulary
       */
      "@id"?: string;
      /**
       * The type of the object, in this case schema:Role
       */
      "@type": "schema:Role";
      /**
       * The category that best matches the nature of a role of an Agent
       */
      "schema:roleName": string;
      /**
       * Date the agent began the role
       */
      "schema:startDate"?: string;
      /**
       * Date the agent ended the role
       */
      "schema:endDate"?: string;
      /**
       * Can be used to indicate the order of importance when there are multiple agents with the same role. Lower order means higher importance.
       */
      "schema:position"?: number;
    }[]
  ];
  /**
   * Email of the agent
   */
  "schema:email"?: string;
  /**
   * URL to a website of the agent
   */
  "schema:url"?: string;
  /**
   * Contains all identifiers associated with the agent
   */
  "ods:hasIdentifiers"?: Identifier[];
}
/**
 * Environmental variables to supply to the a Digital Object, non-sensitive
 */
export interface EnvironmentalVariable {
  /**
   * The name of a non-sensitive property or environmental variable
   */
  "schema:name": string;
  /**
   * Value to be stored in the "name" field. NOT for sensitive information.
   */
  "schema:value": string | number | boolean;
}
/**
 * Secret Variable that need to be supplied to an Digital Object
 */
export interface SecretVariable {
  /**
   * The name of an environmental variable stored remotely
   */
  "schema:name": string;
  /**
   * The name of the key stored in the secret store. NOT the secret's value.
   */
  "ods:secretKeyRef": string;
}
